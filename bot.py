import logging
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes
)
from dotenv import load_dotenv
import database
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
CITY = "Saint Petersburg"
ADMIN_CHAT_ID = 838476401

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_TEXT, SELECTING_CATEGORY, SELECTING_DATE, SELECTING_PRIORITY, CONFIRM_FILE, REMOVING_TASK, COMPLETING_TASK, CONFIRMING_REMOVE, CONFIRMING_COMPLETE = range(9)

user_task_buffer = {}

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_keyboard():
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_keyboard():
    categories = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–£—á—ë–±–∞", "–ü—Ä–æ–µ–∫—Ç—ã", "–°–ø–æ—Ä—Ç"]
    return ReplyKeyboardMarkup([[KeyboardButton(cat)] for cat in categories], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def date_keyboard():
    dates = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é"]
    return ReplyKeyboardMarkup([[KeyboardButton(d)] for d in dates], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
def priority_keyboard():
    priorities = ["üî• –°—Ä–æ—á–Ω–æ", "‚ö° –û–±—ã—á–Ω–æ–µ", "üê¢ –ü–æ—Ç–æ–º"]
    return ReplyKeyboardMarkup([[KeyboardButton(p)] for p in priorities], resize_keyboard=True)

# –î–∞/–ù–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def yes_no_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]], resize_keyboard=True)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
async def get_weather():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as response:
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                wind = data['wind']['speed']
                return f"üåç –ü–æ–≥–æ–¥–∞ –≤ {CITY}:\nüå°Ô∏è {temp}¬∞C, {description}, üå¨Ô∏è {wind} –º/—Å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    await database.add_user(chat_id, username)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)

    if text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await update.message.reply_text(weather, reply_markup=main_keyboard())

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        return ADDING_TEXT

    elif text == "üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞":
        await update.message.reply_text("üéôÔ∏è –ù–∞–¥–∏–∫—Ç—É–π—Ç–µ –∑–∞–¥–∞—á—É –≥–æ–ª–æ—Å–æ–º (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ):")
        return ADDING_TEXT

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=main_keyboard())
        else:
            msg = "\n".join([f"üìù {task[0]} ({task[1] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})" for task in tasks])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard())

    elif text == "üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_completed_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard())
        else:
            msg = "\n".join([f"‚úÖ {task[0]}" for task in tasks])
            await update.message.reply_text(f"üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard())

    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total, completed = 10, 5  # –ü—Å–µ–≤–¥–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–°–æ–∑–¥–∞–Ω–æ: {total}\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}", reply_markup=main_keyboard())

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞":
        if chat_id == ADMIN_CHAT_ID:
            users = await database.get_all_users()
            msg = "üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(
                [f"{'‚≠ê' if u['is_favorite'] else ''} {u['username']} ({u['chat_id']})" for u in users]
            )
            await update.message.reply_text(msg, reply_markup=main_keyboard())
        else:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_keyboard())

    else:
        await update.message.reply_text("‚ùì –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=main_keyboard())
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def add_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_text'] = update.message.text
    await update.message.reply_text("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    return SELECTING_CATEGORY

async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=date_keyboard())
    return SELECTING_DATE

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°–µ–≥–æ–¥–Ω—è":
        context.user_data['due_date'] = datetime.now().strftime('%Y-%m-%d')
    elif text == "–ó–∞–≤—Ç—Ä–∞":
        context.user_data['due_date'] = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    else:
        context.user_data['due_date'] = None
    await update.message.reply_text("‚ö° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=priority_keyboard())
    return SELECTING_PRIORITY

async def select_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['priority'] = update.message.text
    await update.message.reply_text("üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?", reply_markup=yes_no_keyboard())
    return CONFIRM_FILE

async def confirm_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–∞":
        await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):")
        return CONFIRM_FILE
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        return await save_task(update, context)

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    await database.add_task(
        user_id,
        context.user_data.get('task_text'),
        context.user_data.get('category'),
        context.user_data.get('due_date'),
        context.user_data.get('priority'),
        context.user_data.get('file_id')  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    )
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    file_id = update.message.voice.file_id
    file = await context.bot.get_file(file_id)
    voice_text = f"üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (ID: {file_id})"  # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–∑–∂–µ
    await database.add_task(user_id, voice_text, category="–ë—ã—Å—Ç—Ä–∞—è", due_date=None, priority="–û–±—ã—á–Ω–∞—è", file_id=file_id)
    await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task_text)],
    states={
        ADDING_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_text)],
        SELECTING_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_category)],
        SELECTING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_date)],
        SELECTING_PRIORITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_priority)],
        CONFIRM_FILE: [
            MessageHandler(filters.Document.ALL | filters.PHOTO, save_task),
            MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_file)
        ],
    },
    fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_task)],
)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    app.run_webhook(
        listen="127.0.0.1",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )
