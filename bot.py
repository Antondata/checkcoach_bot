import logging
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes
)
from dotenv import load_dotenv
import database
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
CITY = "Saint Petersburg"
ADMIN_CHAT_ID = 838476401

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADDING_TEXT, SELECTING_DATE, CONFIRM_FILE, WAITING_FILE = range(4)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_keyboard():
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def date_keyboard():
    dates = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é"]
    return ReplyKeyboardMarkup([[KeyboardButton(d)] for d in dates], resize_keyboard=True)

# –î–∞/–ù–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def yes_no_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]], resize_keyboard=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
async def get_weather():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as response:
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                wind = data['wind']['speed']
                return f"üåç –ü–æ–≥–æ–¥–∞ –≤ {CITY}:\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüå•Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüå¨Ô∏è –í–µ—Ç–µ—Ä: {wind} –º/—Å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    await database.add_user(chat_id, username)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=main_keyboard())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)

    if text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await update.message.reply_text(weather, reply_markup=main_keyboard())

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á (–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        return ADDING_TEXT

    elif text == "üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞":
        await update.message.reply_text("üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        return WAITING_FILE

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=main_keyboard())
        else:
            msg = "\n".join([f"üìù {task[0]}" for task in tasks])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard())

    elif text == "üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_completed_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard())
        else:
            msg = "\n".join([f"‚úÖ {task[0]}" for task in tasks])
            await update.message.reply_text(f"üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard())

    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total, completed = 10, 5  # –ü—Å–µ–≤–¥–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–°–æ–∑–¥–∞–Ω–æ: {total}\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}", reply_markup=main_keyboard())

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞":
        if chat_id == ADMIN_CHAT_ID:
            users = await database.get_all_users()
            msg = "üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"{u['username']} ({u['chat_id']})" for u in users])
            await update.message.reply_text(msg, reply_markup=main_keyboard())
        else:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_keyboard())

    else:
        await update.message.reply_text("‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=main_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
async def add_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_text'] = update.message.text
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=date_keyboard())
    return SELECTING_DATE

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°–µ–≥–æ–¥–Ω—è":
        context.user_data['due_date'] = datetime.now().strftime('%Y-%m-%d')
    elif text == "–ó–∞–≤—Ç—Ä–∞":
        context.user_data['due_date'] = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    else:
        context.user_data['due_date'] = None
    await update.message.reply_text("üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?", reply_markup=yes_no_keyboard())
    return CONFIRM_FILE

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
async def confirm_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–∞":
        await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:")
        return WAITING_FILE
    else:
        return await save_task(update, context)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    task_text = context.user_data.get('task_text')

    tasks = task_text.split('\n')
    for t in tasks:
        t = t.strip()
        if t:
            await database.add_task(
                user_id,
                t,
                due_date=context.user_data.get('due_date')
            )

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞(–∏) –¥–æ–±–∞–≤–ª–µ–Ω–∞(—ã)!", reply_markup=main_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    file_id = update.message.voice.file_id
    voice_task = f"üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (ID: {file_id})"
    await database.add_task(user_id, voice_task, due_date=None)
    await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

# –ö–æ–Ω—Ñ–∏–≥ –±–æ—Ç–∞
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), main_menu_handler)],
    states={
        ADDING_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_text)],
        SELECTING_DATE: [MessageHandler(filters.Regex("^(–°–µ–≥–æ–¥–Ω—è|–ó–∞–≤—Ç—Ä–∞|–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é)$"), select_date)],
        CONFIRM_FILE: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), confirm_file)],
        WAITING_FILE: [
            MessageHandler(filters.Document.ALL | filters.PHOTO, save_task),
            MessageHandler(filters.VOICE, handle_voice)
        ],
    },
    fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_task)],
)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler))

    app.run_webhook(
        listen="127.0.0.1",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )
