import logging
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
from dotenv import load_dotenv
import database

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
ADMIN_CHAT_ID = 838476401

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

ADDING_TASK, CHOOSING_USER, WRITING_TASK = range(3)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard(is_admin=False):
    keyboard = [
        [KeyboardButton("‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("üìÑ –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")]
    ]
    if is_admin:
        keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
def yes_no_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")]], resize_keyboard=True)

# –ü–æ–≥–æ–¥–∞
async def get_weather():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q=Saint Petersburg&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as response:
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                wind = data['wind']['speed']
                return f"üåç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\nüå°Ô∏è {temp}¬∞C\n‚òÅÔ∏è {description}\nüå¨Ô∏è {wind} –º/—Å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"

    await database.add_user(chat_id, username)
    await update.message.reply_text(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    phone_number = contact.phone_number

    await database.add_user(chat_id, username, phone_number)

    await update.message.reply_text(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID))
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    is_admin = (chat_id == ADMIN_CHAT_ID)

    # ‚¨áÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏
    if context.application.chat_data.get(chat_id, {}).get('awaiting_accept'):
        return await accept_task(update, context)

    if text == "‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        contacts = await database.get_all_contacts()
        buttons = [[KeyboardButton(user['username'])] for user in contacts if user['chat_id'] != chat_id]
        context.user_data['contacts'] = {user['username']: user['chat_id'] for user in contacts}
        if buttons:
            await update.message.reply_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            return CHOOSING_USER
        else:
            await update.message.reply_text("‚ùó –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_keyboard(is_admin=is_admin))
            return ConversationHandler.END

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_tasks_for_user(chat_id)
        if not tasks:
            await update.message.reply_text("üéØ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=main_keyboard(is_admin=is_admin))
        else:
            message = "\n".join([f"üìù {task['task_text']} ({task['status']})" for task in tasks])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{message}", reply_markup=main_keyboard(is_admin=is_admin))

    elif text == "üìÑ –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_assigned_tasks(chat_id)
        if not tasks:
            await update.message.reply_text("üì≠ –í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard(is_admin=is_admin))
        else:
            message = "\n".join([f"üì§ {task['task_text']} ‚Üí @{task['receiver_username']} ({task['status']})" for task in tasks])
            await update.message.reply_text(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{message}", reply_markup=main_keyboard(is_admin=is_admin))

    elif text == "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º":
        await update.message.reply_text(
            "üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                resize_keyboard=True
            )
        )

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞" and is_admin:
        users = await database.get_all_contacts()
        msg = "üëë –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"‚Ä¢ @{u['username']} ({u['phone_number']})" for u in users)
        await update.message.reply_text(msg, reply_markup=main_keyboard(is_admin=True))

    else:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_keyboard(is_admin=is_admin))

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def choose_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_username = update.message.text
    receiver_id = context.user_data['contacts'].get(selected_username)

    if receiver_id:
        context.user_data['receiver_id'] = receiver_id
        await update.message.reply_text(f"‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è @{selected_username}:")
        return WRITING_TASK
    else:
        await update.message.reply_text("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard(is_admin=(update.message.chat_id == ADMIN_CHAT_ID)))
        return ConversationHandler.END

# –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def write_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = update.message.text
    sender_id = update.message.chat_id
    receiver_id = context.user_data['receiver_id']

    await database.add_task(sender_id, receiver_id, task_text, status="pending")

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(is_admin=(sender_id == ADMIN_CHAT_ID)))

    await context.bot.send_message(
        chat_id=receiver_id,
        text=f"üì© –í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:\n\n{task_text}",
        reply_markup=yes_no_keyboard()
    )

    context.application.chat_data.setdefault(receiver_id, {})['awaiting_accept'] = True
    return ConversationHandler.END

# –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def accept_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    is_admin = (chat_id == ADMIN_CHAT_ID)

    if text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å":
        await database.update_task_status(chat_id, "accepted")
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=main_keyboard(is_admin=is_admin))
    elif text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        await database.update_task_status(chat_id, "rejected")
        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=main_keyboard(is_admin=is_admin))
    else:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=main_keyboard(is_admin=is_admin))

    context.application.chat_data.get(chat_id, {}).pop('awaiting_accept', None)
    return ConversationHandler.END

# –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler),
            MessageHandler(filters.CONTACT, contact_handler)
        ],
        states={
            CHOOSING_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_user)],
            WRITING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, write_task)],
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_webhook(
        listen="127.0.0.1",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )
