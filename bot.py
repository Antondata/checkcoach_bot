import logging
import os
import aiohttp
import aiosqlite
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from datetime import time
from dotenv import load_dotenv
import database

load_dotenv()
API_KEY = os.getenv("OPENWEATHER_API_KEY")
CITY = "Saint Petersburg"
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = 838476401

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

ADDING_TASK, REMOVING_TASK, COMPLETING_TASK, CONFIRMING_REMOVE, CONFIRMING_COMPLETE = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
user_task_buffer = {}

def main_keyboard():
    keyboard = [
        [KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def yes_no_keyboard():
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    await database.add_user(chat_id, username)

    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)

    if text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
        await update.message.reply_text("üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ:", reply_markup=main_keyboard())

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=main_keyboard())
        else:
            task_buttons = [[KeyboardButton(task)] for task in tasks]
            task_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
            await update.message.reply_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        return ADDING_TASK

    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
        else:
            task_buttons = [[KeyboardButton(task)] for task in tasks]
            task_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
            await update.message.reply_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
            return REMOVING_TASK

    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=main_keyboard())
        else:
            task_buttons = [[KeyboardButton(task)] for task in tasks]
            task_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
            await update.message.reply_text("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=reply_markup)
            return COMPLETING_TASK

    elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total, completed = await database.get_weekly_stats(user_id)
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {total}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed}", reply_markup=main_keyboard())

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞":
        if chat_id == ADMIN_CHAT_ID:
            users = await database.get_all_users()
            msg = "üëë –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for u in users:
                msg += f"ID: {u['chat_id']}, Username: {u['username']}\n"
            await update.message.reply_text(msg, reply_markup=main_keyboard())
        else:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_keyboard())

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_keyboard())

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks_text = update.message.text.strip().split("\n")
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    for task in tasks_text:
        if task.strip():
            await database.add_task(user_id, task.strip())
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_keyboard())
    return ConversationHandler.END

async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_task_buffer[chat_id] = update.message.text
    await update.message.reply_text(f"‚ùì –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{update.message.text}'?", reply_markup=yes_no_keyboard())
    return CONFIRMING_REMOVE

async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_task_buffer[chat_id] = update.message.text
    await update.message.reply_text(f"‚ùì –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É '{update.message.text}'?", reply_markup=yes_no_keyboard())
    return CONFIRMING_COMPLETE

async def confirm_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if update.message.text == "–î–∞":
        user_id = await database.get_user_id(chat_id)
        await database.remove_task(user_id, user_task_buffer[chat_id])
        await update.message.reply_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {user_task_buffer[chat_id]}", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
    return ConversationHandler.END

async def confirm_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if update.message.text == "–î–∞":
        user_id = await database.get_user_id(chat_id)
        await database.complete_task(user_id, user_task_buffer[chat_id])
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {user_task_buffer[chat_id]}", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=main_keyboard())
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task)],
            REMOVING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_task)],
            COMPLETING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_task)],
            CONFIRMING_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_remove)],
            CONFIRMING_COMPLETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_complete)],
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_webhook(
        listen="127.0.0.1",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )