import logging 
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
from dotenv import load_dotenv
import database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
ADMIN_CHAT_ID = 838476401

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not OPENWEATHER_API_KEY:
    raise ValueError("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏–ª–∏ OPENWEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(WRITING_SELF_TASK, CHOOSING_USER, WRITING_USER_TASK,
 CHOOSING_TASK_TO_COMPLETE, CONFIRM_COMPLETION,
 CHOOSING_TASK_TO_DELETE, CONFIRM_DELETION) = range(7)

user_data_buffer = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard(is_admin=False):
    keyboard = [
        [KeyboardButton("‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ"), KeyboardButton("üì§ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–º—É")],
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞")],
        [KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")]
    ]
    if is_admin:
        keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –î–∞/–ù–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def yes_no_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç")]],
        resize_keyboard=True
    )

# –ü–æ–≥–æ–¥–∞
async def get_weather():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q=Saint Petersburg&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: –∫–æ–¥ {response.status}")
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                wind = data['wind']['speed']
                return f"üåç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\nüå°Ô∏è {temp}¬∞C\n‚òÅÔ∏è {description}\nüå¨Ô∏è {wind} –º/—Å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    await database.add_user(chat_id, username, None)
    await update.message.reply_text(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True
        )
    )

# –ö–æ–Ω—Ç–∞–∫—Ç
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    phone_number = contact.phone_number
    await database.add_user(chat_id, username, phone_number)

    await update.message.reply_text(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!",
        reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID))
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    is_admin = (chat_id == ADMIN_CHAT_ID)

    if text == "‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–µ–±—è:")
        return WRITING_SELF_TASK

    elif text == "üì§ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–º—É":
        contacts = await database.get_all_contacts()
        buttons = [[KeyboardButton(user['username'])] for user in contacts if user['chat_id'] != chat_id]
        context.user_data['contacts'] = {user['username']: user['chat_id'] for user in contacts}
        if buttons:
            await update.message.reply_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            return CHOOSING_USER
        else:
            await update.message.reply_text("‚ùó –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_keyboard(is_admin))

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_tasks_for_user(chat_id)
        tasks = [t for t in tasks if t['status'] != 'completed']
        if not tasks:
            await update.message.reply_text("üéØ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=main_keyboard(is_admin))
        else:
            msg = "\n".join([f"üìù {task['task_text']} ({task['status']})" for task in tasks])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard(is_admin))

    elif text == "üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_assigned_tasks(chat_id)
        if not tasks:
            await update.message.reply_text("üì≠ –í—ã –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard(is_admin))
        else:
            msg = "\n".join([f"üì§ {task['task_text']} ‚Üí @{task['receiver_username']} ({task['status']})" for task in tasks])
            await update.message.reply_text(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard(is_admin))

    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_tasks_for_user(chat_id)
        tasks = [t for t in tasks if t['status'] == 'accepted']
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=main_keyboard(is_admin))
            return ConversationHandler.END
        context.user_data['completion_tasks'] = tasks
        buttons = [[KeyboardButton(task['task_text'])] for task in tasks]
        await update.message.reply_text("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
        return CHOOSING_TASK_TO_COMPLETE

    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_tasks_for_user(chat_id)
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard(is_admin))
            return ConversationHandler.END
        context.user_data['deletion_tasks'] = tasks
        buttons = [[KeyboardButton(task['task_text'])] for task in tasks]
        await update.message.reply_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
        return CHOOSING_TASK_TO_DELETE

    elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        count = await database.get_task_count(chat_id)
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {count}", reply_markup=main_keyboard(is_admin))

    elif text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await update.message.reply_text(weather, reply_markup=main_keyboard(is_admin))

    elif text == "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º":
        await update.message.reply_text(
            "üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                resize_keyboard=True
            )
        )

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞" and is_admin:
        users = await database.get_all_contacts()
        msg = "üëë –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"‚Ä¢ @{u['username']} ({u['phone_number']})" for u in users)
        await update.message.reply_text(msg, reply_markup=main_keyboard(is_admin))

    else:
        await update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_keyboard(is_admin))


async def write_self_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = update.message.text
    chat_id = update.message.chat_id
    await database.add_task(chat_id, chat_id, task_text, status="accepted")
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    return ConversationHandler.END

# –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def choose_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_username = update.message.text
    receiver_id = context.user_data.get('contacts', {}).get(selected_username)
    if not receiver_id:
        await update.message.reply_text("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard())
        return ConversationHandler.END
    context.user_data['receiver_id'] = receiver_id
    await update.message.reply_text(f"‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è @{selected_username}:")
    return WRITING_USER_TASK

# –ü–∏—à–µ–º –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É
async def write_user_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = update.message.text
    sender_id = update.message.chat_id
    receiver_id = context.user_data.get('receiver_id')

    if not receiver_id:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard())
        return ConversationHandler.END

    await database.add_task(sender_id, receiver_id, task_text, status="pending")
    context.user_data.clear()

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(is_admin=(sender_id == ADMIN_CHAT_ID)))

    await context.bot.send_message(
    chat_id=receiver_id,
    text=f"üì© –í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:\n\n{task_text}",
    reply_markup=ReplyKeyboardMarkup(
        [[KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )
)
context.application.user_data.setdefault(receiver_id, {})['pending_task_text'] = task_text

return ConversationHandler.END


# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def choose_task_to_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = update.message.text
    chat_id = update.message.chat_id
    user_data_buffer[chat_id] = task_text
    await update.message.reply_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{task_text}", reply_markup=yes_no_keyboard())
    return CONFIRM_COMPLETION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def confirm_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    answer = update.message.text
    task_text = user_data_buffer.get(chat_id)

    if not task_text:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard())
        return ConversationHandler.END

    if answer == "‚úÖ –î–∞":
        await database.update_task_status_by_text(chat_id, task_text, "completed")
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    else:
        await update.message.reply_text("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    user_data_buffer.pop(chat_id, None)
    return ConversationHandler.END

# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def choose_task_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = update.message.text
    chat_id = update.message.chat_id
    user_data_buffer[chat_id] = task_text
    await update.message.reply_text(f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{task_text}", reply_markup=yes_no_keyboard())
    return CONFIRM_DELETION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async def confirm_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    answer = update.message.text
    task_text = user_data_buffer.get(chat_id)

    if not task_text:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard())
        return ConversationHandler.END

    if answer == "‚úÖ –î–∞":
        await database.delete_task_by_text(chat_id, task_text)
        await update.message.reply_text("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    else:
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    user_data_buffer.pop(chat_id, None)
    return ConversationHandler.END

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def handle_accept_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id

    # –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    pending_task = context.application.user_data.get(chat_id, {}).get('pending_task_text')

    if not pending_task:
        await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
        return ConversationHandler.END

    if text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å":
        await database.update_task_status_by_text(chat_id, pending_task, "accepted")
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    elif text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        await database.update_task_status_by_text(chat_id, pending_task, "rejected")
        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))
    else:
        await update.message.reply_text("‚ùì –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_keyboard(is_admin=(chat_id == ADMIN_CHAT_ID)))

    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.application.user_data.pop(chat_id, None)

    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–¥–∞—á
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler),
            MessageHandler(filters.CONTACT, contact_handler),
        ],
        states={
            WRITING_SELF_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, write_self_task)],
            CHOOSING_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_user)],
            WRITING_USER_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, write_user_task)],
            CHOOSING_TASK_TO_COMPLETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_task_to_complete)],
            CONFIRM_COMPLETION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_completion)],
            CHOOSING_TASK_TO_DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_task_to_delete)],
            CONFIRM_DELETION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_deletion)],
        },
        fallbacks=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)
        ],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    # –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    app.add_handler(MessageHandler(filters.Regex("^(‚úÖ –ü—Ä–∏–Ω—è—Ç—å|‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å)$"), handle_accept_reject))

    # –°—Ç–∞—Ä—Ç—É–µ–º —á–µ—Ä–µ–∑ Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )
