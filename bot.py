import logging
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import database

load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
ADMIN_CHAT_ID = 838476401

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

ADDING_TASK, REMOVING_TASK, COMPLETING_TASK, CONFIRM_REMOVE, CONFIRM_COMPLETE = range(5)

user_task_buffer = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    keyboard = [
        [KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –î–∞/–ù–µ—Ç
def yes_no_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]], resize_keyboard=True)

# –ü–æ–≥–æ–¥–∞ + –ö–∞—Ä—Ç–∞
async def get_weather():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q=Saint Petersburg&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as response:
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                wind = data['wind']['speed']
                return f"üåç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\nüå°Ô∏è {temp}¬∞C\n‚òÅÔ∏è {description}\nüå¨Ô∏è {wind} –º/—Å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await database.init_db()
    chat_id = update.message.chat_id
    username = update.message.from_user.username or "NoName"
    await database.add_user(chat_id, username)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=main_keyboard())

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)

    if text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await update.message.reply_text(weather, reply_markup=main_keyboard())
        await context.bot.send_photo(chat_id=chat_id, photo="https://upload.wikimedia.org/wikipedia/commons/e/e0/Saint_Petersburg_on_the_world_map.png")

    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=main_keyboard())
        else:
            buttons = [[KeyboardButton(task)] for task in tasks]
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            await update.message.reply_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ—Å—Ç—Ä–æ—á–Ω–æ):")
        return ADDING_TASK

    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
        else:
            buttons = [[KeyboardButton(task)] for task in tasks]
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            await update.message.reply_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            return REMOVING_TASK

    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await database.get_active_tasks(user_id)
        if not tasks:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=main_keyboard())
        else:
            buttons = [[KeyboardButton(task)] for task in tasks]
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            await update.message.reply_text("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            return COMPLETING_TASK

    elif text == "üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏":
        tasks = await database.get_completed_tasks(user_id)
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard())
        else:
            msg = "\n".join(f"‚úÖ {task}" for task in tasks)
            await update.message.reply_text(f"üìÑ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=main_keyboard())

    elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total, completed = await database.get_weekly_stats(user_id)
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {total}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}", reply_markup=main_keyboard())

    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞":
        if chat_id == ADMIN_CHAT_ID:
            users = await database.get_all_users()
            if users:
                msg = "üëë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
                for u in users:
                    msg += f"‚Ä¢ @{u['username']} (ID: {u['chat_id']})\n"
                await update.message.reply_text(msg, reply_markup=main_keyboard())
            else:
                await update.message.reply_text("‚õî –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_keyboard())
        else:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_keyboard())

    else:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.", reply_markup=main_keyboard())

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    tasks = update.message.text.split('\n')
    for t in tasks:
        t = t.strip()
        if t:
            await database.add_task(user_id, t)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_keyboard())
    return ConversationHandler.END

async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_task_buffer[chat_id] = update.message.text
    await update.message.reply_text(f"‚ùì –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{update.message.text}'?", reply_markup=yes_no_keyboard())
    return CONFIRM_REMOVE

async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_task_buffer[chat_id] = update.message.text
    await update.message.reply_text(f"‚ùì –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É '{update.message.text}'?", reply_markup=yes_no_keyboard())
    return CONFIRM_COMPLETE

async def confirm_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    if update.message.text == "–î–∞":
        await database.remove_task(user_id, user_task_buffer[chat_id])
        await update.message.reply_text("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
    return ConversationHandler.END

async def confirm_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = await database.get_user_id(chat_id)
    if update.message.text == "–î–∞":
        await database.complete_task(user_id, user_task_buffer[chat_id])
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=main_keyboard())
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        states={
            ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task)],
            REMOVING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_task)],
            COMPLETING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_task)],
            CONFIRM_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_remove)],
            CONFIRM_COMPLETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_complete)],
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_webhook(
        listen="127.0.0.1",
        port=8443,
        url_path=TOKEN,
        webhook_url=f"https://pitg.online/{TOKEN}",
        allowed_updates=Update.ALL_TYPES
    )
